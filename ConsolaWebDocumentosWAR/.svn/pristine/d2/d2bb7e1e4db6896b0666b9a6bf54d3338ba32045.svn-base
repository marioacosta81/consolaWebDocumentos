package com.davivienda.web.menu.apertura.productos.online.util;

import java.text.MessageFormat;
import java.util.StringTokenizer;
import java.util.regex.Pattern;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.davivienda.web.menu.apertura.productos.online.handler.PreferencesHandler;


public class Util {
	
	private static final Logger logger = LoggerFactory.getLogger(Util.class.getName());

	public static String getHttpParameterValue(String parameter, HttpServletRequest request) {
		String value = request.getParameter(parameter);
		return stripXSS(value);
	}

	private static String stripXSS(String value) {
		if (value != null) {
			// NOTE: It's highly recommended to use the ESAPI library and uncomment the following line to
			// avoid encoded attacks.
			// value = ESAPI.encoder().canonicalize(value);

			value = value.replaceAll("[^\\dA-Za-z\\.\\s ]", ""); //.replaceAll("\\s+", "");

			// Avoid null characters
			value = value.replaceAll("", "");

			// Avoid anything between script tags
			Pattern scriptPattern = Pattern.compile("<script>(.*?)</script>", Pattern.CASE_INSENSITIVE);
			value = scriptPattern.matcher(value).replaceAll("");

			// Avoid anything in a src='...' type of expression
			scriptPattern = Pattern.compile("src[\r\n]*=[\r\n]*\\\'(.*?)\\\'", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);
			value = scriptPattern.matcher(value).replaceAll("");

			scriptPattern = Pattern.compile("src[\r\n]*=[\r\n]*\\\"(.*?)\\\"", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);
			value = scriptPattern.matcher(value).replaceAll("");

			// Remove any lonesome </script> tag
			scriptPattern = Pattern.compile("</script>", Pattern.CASE_INSENSITIVE);
			value = scriptPattern.matcher(value).replaceAll("");

			// Remove any lonesome <script ...> tag
			scriptPattern = Pattern.compile("<script(.*?)>", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);
			value = scriptPattern.matcher(value).replaceAll("");

			// Avoid eval(...) expressions
			scriptPattern = Pattern.compile("eval\\((.*?)\\)", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);
			value = scriptPattern.matcher(value).replaceAll("");

			// Avoid expression(...) expressions
			scriptPattern = Pattern.compile("expression\\((.*?)\\)", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);
			value = scriptPattern.matcher(value).replaceAll("");

			// Avoid javascript:... expressions
			scriptPattern = Pattern.compile("javascript:", Pattern.CASE_INSENSITIVE);
			value = scriptPattern.matcher(value).replaceAll("");

			// Avoid vbscript:... expressions
			scriptPattern = Pattern.compile("vbscript:", Pattern.CASE_INSENSITIVE);
			value = scriptPattern.matcher(value).replaceAll("");

			// Avoid onload= expressions
			scriptPattern = Pattern.compile("onload(.*?)=", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);
			value = scriptPattern.matcher(value).replaceAll("");
		}
		return value;
	}


	/**
	 * Metodo para obtener la ip desde el request
	 * @param request
	 * @return the ip
	 */
	public static String getIP(HttpServletRequest request, String ipHeaderNames){

		String ip = null;
		if ( ipHeaderNames != null && ! ipHeaderNames.isEmpty()) {
			StringTokenizer tokenizerHeaders = new StringTokenizer(ipHeaderNames, Constantes.CARACTER_COMA);
			while (tokenizerHeaders.hasMoreElements()) {
				String ipHeaderName = tokenizerHeaders.nextToken().trim();
				if( (ip = request.getHeader(ipHeaderName)) != null ){
					StringTokenizer tokenizerIps = new StringTokenizer(ip, Constantes.CARACTER_COMA);
					while (tokenizerIps.hasMoreElements()) {
						ip = tokenizerIps.nextToken().trim();
						return ip;
					}
				}
			}
		}

		if (ip == null) {  
			ip = request.getRemoteAddr();
		}
		return ip;
	}

	
	/**
	 * Utilidad para obtener las propiedades. 
	 * @param propertyName Nombre de la propiedad (llave)
	 * @param parametros Arreglo de objetos con los parametros que se reemplazarán en el mensaje. Se
	 * 					 usará lo que devuelva el método toString() de cada objeto recibido
	 * @return Devuelve el valor de la propiedad de acuerdo a la llave recibida
	 */
	public static String getProperty(String propertyName, Object... parametros) {
		
		PreferencesHandler pref = PreferencesHandler.getInstance();
		String valuePropertie = pref.getProperty(propertyName);
		
		if( null != parametros && parametros.length > 0 ) {
			valuePropertie = MessageFormat.format(valuePropertie, parametros);
		}
		
		return valuePropertie;
	}
}
